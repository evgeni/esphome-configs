esphome:
  name: ${devicename}

esp8266:
  board: modwifi
  restore_from_flash: true

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  power_save_mode: none

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: !secret fallback_ssid
    password: !secret fallback_password

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_key

ota:
  password: !secret ota_password

time:
  - platform: homeassistant
    id: homeassistant_time
    on_time:
      - cron: '0 0 21 * * *'
        then:
          if:
            condition:
              switch.is_off: ignore_schedule
            then:
              cover.close: rolladen
      - cron: ${open_time}
        then:
          if:
            condition:
              switch.is_off: ignore_schedule
            then:
              cover.open: rolladen
      - cron: ${open_time_2}
        then:
          if:
            condition:
              switch.is_off: ignore_schedule
            then:
              cover.open: rolladen

i2c:
  sda: ${pin_sda}
  scl: ${pin_scl}

sun:
  latitude: !secret latitude
  longitude: !secret longitude
  on_sunset:
    - then:
        if:
          condition:
            switch.is_off: ignore_schedule
          then:
            - delay: 2h
            - cover.close: rolladen


sensor:
  - platform: ade7953
    irq_pin: GPIO16
    voltage:
      name: Shelly Voltage
      filters:
        - throttle: 5s
    current_a:
      name: Shelly Current B
      id: "current_b"
      internal: true
    current_b:
      name: Shelly Current A
      id: "current_a"
      internal: true
    active_power_a:
      name: Shelly Active Power B
      id: shelly_active_power_b
      internal: true
      filters:
        - multiply: -1
    active_power_b:
      name: Shelly Active Power A
      id: shelly_active_power_a
      internal: true
      filters:
        - multiply: -1
    update_interval: 0.5s

  # NTC Temperature
  - platform: ntc
    sensor: temp_resistance_reading
    name: "Shelly Temperature"
    calibration:
      b_constant: 3350
      reference_resistance: 10kOhm
      reference_temperature: 298.15K

  - platform: resistance
    id: temp_resistance_reading
    sensor: temp_analog_reading
    configuration: DOWNSTREAM
    resistor: 32kOhm

  - platform: adc
    id: temp_analog_reading
    pin: ${pin_temp}

  - platform: uptime
    name: Uptime Sensor

  - platform: wifi_signal
    name: "WiFi Signal Sensor"

switch:
  - platform: gpio
    pin: ${pin_relay1}
    name: "Relay #1"
    internal: true
    id: relay1
    interlock: &interlock_group [relay1, relay2]

  - platform: gpio
    pin: ${pin_relay2}
    name: "Relay #2"
    internal: true
    id: relay2
    interlock: *interlock_group

  - platform: template
    id: block_control
    name: "${location} Block Control"
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON

  - platform: template
    id: ignore_schedule
    name: "${location} Ignore Schedule"
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON

  - platform: template
    name: "Move UP"
    internal: true
    lambda: |-
      if (id(${open_switch}).state && !id(block_control).state) {
        return true;
      } else {
        return false;
      }
    on_turn_on:
      then:
        cover.open: rolladen
    on_turn_off:
      then:
        cover.stop: rolladen
    optimistic: true

  - platform: template
    name: "Move DOWN"
    internal: true
    lambda: |-
      if (id(${close_switch}).state && !id(block_control).state) {
        return true;
      } else {
        return false;
      }
    on_turn_on:
      then:
        cover.close: rolladen
    on_turn_off:
      then:
        cover.stop: rolladen
    optimistic: true

binary_sensor:
  - platform: gpio
    pin: ${pin_switch1n}
    name: "Switch #1"
    internal: true
    id: switch1

  - platform: gpio
    pin: ${pin_switch2n}
    name: "Switch #2"
    internal: true
    id: switch2

cover:
  - platform: current_based
    name: "${location} Rolladen"
    id: rolladen

    open_action:
      - switch.turn_on: ${open_relay}
    open_duration: ${open_duration}
    open_sensor: ${open_sensor}
    open_moving_current_threshold: 0.4

    close_action:
      - switch.turn_on: ${close_relay}
    close_duration: ${close_duration}
    close_sensor: ${close_sensor}
    close_moving_current_threshold: 0.5

    start_sensing_delay: 1s

    stop_action:
      - switch.turn_off: ${open_relay}
      - switch.turn_off: ${close_relay}
